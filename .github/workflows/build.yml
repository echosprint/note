name: Build All Platforms

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 (native)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            make_target: linux
            
          # Windows targets
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            make_target: x86_64
            
          - target: i686-pc-windows-gnu
            os: ubuntu-latest
            make_target: x86_32
            
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            make_target: macos_intel
            
          - target: aarch64-apple-darwin
            os: macos-latest
            make_target: macos_arm

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-mingw-w64-i686

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build
      run: make ${{ matrix.make_target }}

    - name: Get binary name from Cargo.toml
      id: binary_name
      run: |
        BINARY_NAME=$(grep '^name =' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')
        echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT

    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          cp target/${{ matrix.target }}/release/${{ steps.binary_name.outputs.binary_name }}.exe artifacts/
        else
          cp target/${{ matrix.target }}/release/${{ steps.binary_name.outputs.binary_name }} artifacts/
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.binary_name.outputs.binary_name }}-${{ matrix.target }}
        path: artifacts/

  # Create GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4

    - name: Get binary name from Cargo.toml
      id: binary_name
      run: |
        BINARY_NAME=$(grep '^name =' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')
        echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(grep '^version =' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          VERSION="v${VERSION}-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p ./release
        cd ./artifacts
        
        # Create archives for each platform
        for dir in */; do
          platform=$(basename "$dir")
          cd "$dir"
          
          if [[ "$platform" == *"windows"* ]]; then
            # For Windows, create a zip file
            zip -r "../../release/${{ steps.binary_name.outputs.binary_name }}-${platform}.zip" *
          else
            # For Unix-like systems, create a tar.gz file
            tar -czf "../../release/${{ steps.binary_name.outputs.binary_name }}-${platform}.tar.gz" *
          fi
          
          cd ..
        done

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## Release ${{ steps.version.outputs.version }}
        
        ### Built for multiple platforms:
        - **Linux x86_64**: `${{ steps.binary_name.outputs.binary_name }}-x86_64-unknown-linux-gnu.tar.gz`
        - **Windows x86_64**: `${{ steps.binary_name.outputs.binary_name }}-x86_64-pc-windows-gnu.zip`
        - **Windows x86_32**: `${{ steps.binary_name.outputs.binary_name }}-i686-pc-windows-gnu.zip`
        - **macOS Intel**: `${{ steps.binary_name.outputs.binary_name }}-x86_64-apple-darwin.tar.gz`
        - **macOS Apple Silicon**: `${{ steps.binary_name.outputs.binary_name }}-aarch64-apple-darwin.tar.gz`
        
        ### Installation:
        1. Download the appropriate archive for your platform
        2. Extract the archive
        3. Make the binary executable (Unix/Linux/macOS): `chmod +x ${{ steps.binary_name.outputs.binary_name }}`
        4. Move to a directory in your PATH or run directly
        
        ---
        **Commit**: ${{ github.sha }}
        **Built**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: ./release/*
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 